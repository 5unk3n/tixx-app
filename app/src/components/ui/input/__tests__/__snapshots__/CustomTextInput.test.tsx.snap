// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomTextInput should render correctly based on props renders correctly for case 1 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      {
        "flex": 1,
      }
    }
  >
    <View>
      <View
        style={
          [
            {
              "borderRadius": 8,
              "flexDirection": "row",
            },
            {
              "backgroundColor": "#1B1B1B",
            },
            {
              "height": 48,
            },
            undefined,
          ]
        }
      >
        <TextInput
          editable={true}
          onChangeText={[Function]}
          placeholderTextColor="#585858"
          style={
            [
              {
                "flexBasis": "0%",
                "flexGrow": 1,
                "flexShrink": 1,
              },
              {
                "paddingLeft": 20,
                "paddingRight": 20,
              },
              {
                "fontFamily": "Pretendard-Medium",
                "fontWeight": "500",
              },
              {
                "fontSize": 16,
              },
              {
                "letterSpacing": -0.32,
              },
              {
                "color": "#FFFFFF",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
            ]
          }
          value="test"
        />
      </View>
      <Text
        collapsable={false}
        maxFontSizeMultiplier={1.5}
        onLayout={[Function]}
        style={
          {
            "bottom": -27,
            "color": "#F2F862",
            "fontFamily": "Pretendard-Regular",
            "fontSize": 12,
            "fontWeight": "400",
            "letterSpacing": -0.02,
            "lineHeight": 14,
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "right",
            "transform": [
              {
                "translateY": -0,
              },
            ],
            "writingDirection": "ltr",
          }
        }
      >
        오류 메시지
      </Text>
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`CustomTextInput should render correctly based on props renders correctly for case 2 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      {
        "flex": 1,
      }
    }
  >
    <View>
      <View
        style={
          [
            {
              "borderRadius": 8,
              "flexDirection": "row",
            },
            {
              "backgroundColor": "#1B1B1B",
            },
            {
              "height": 48,
            },
            undefined,
          ]
        }
      >
        <TextInput
          editable={true}
          onChangeText={[Function]}
          placeholderTextColor="#585858"
          style={
            [
              {
                "flexBasis": "0%",
                "flexGrow": 1,
                "flexShrink": 1,
              },
              {
                "paddingLeft": 20,
                "paddingRight": 20,
              },
              {
                "fontFamily": "Pretendard-Medium",
                "fontWeight": "500",
              },
              {
                "fontSize": 16,
              },
              {
                "letterSpacing": -0.32,
              },
              {
                "color": "#FFFFFF",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
            ]
          }
          value="test"
        />
        <View
          style={
            [
              {
                "flexGrow": 0,
              },
              {
                "alignItems": "center",
              },
              {
                "justifyContent": "center",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
              {
                "paddingLeft": 8,
                "paddingRight": 8,
              },
            ]
          }
        >
          <TextInput
            testID="right-element"
          />
        </View>
      </View>
      <Text
        collapsable={false}
        maxFontSizeMultiplier={1.5}
        onLayout={[Function]}
        style={
          {
            "bottom": -27,
            "color": "#F2F862",
            "fontFamily": "Pretendard-Regular",
            "fontSize": 12,
            "fontWeight": "400",
            "letterSpacing": -0.02,
            "lineHeight": 14,
            "opacity": 0,
            "paddingHorizontal": 8,
            "paddingVertical": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "right",
            "transform": [],
            "writingDirection": "ltr",
          }
        }
      />
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`CustomTextInput should render correctly based on props renders correctly for case 3 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      {
        "flex": 1,
      }
    }
  >
    <View>
      <View
        style={
          [
            {
              "borderRadius": 8,
              "flexDirection": "row",
            },
            {
              "backgroundColor": "#1B1B1B",
            },
            {
              "height": 48,
            },
            undefined,
          ]
        }
      >
        <TextInput
          editable={false}
          onChangeText={[Function]}
          placeholderTextColor="#585858"
          style={
            [
              {
                "flexBasis": "0%",
                "flexGrow": 1,
                "flexShrink": 1,
              },
              {
                "paddingLeft": 20,
                "paddingRight": 20,
              },
              {
                "fontFamily": "Pretendard-Medium",
                "fontWeight": "500",
              },
              {
                "fontSize": 16,
              },
              {
                "letterSpacing": -0.32,
              },
              {
                "color": "#A0A2A2",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
            ]
          }
          value="test"
        />
      </View>
      <Text
        collapsable={false}
        maxFontSizeMultiplier={1.5}
        onLayout={[Function]}
        style={
          {
            "bottom": -27,
            "color": "#F2F862",
            "fontFamily": "Pretendard-Regular",
            "fontSize": 12,
            "fontWeight": "400",
            "letterSpacing": -0.02,
            "lineHeight": 14,
            "opacity": 0,
            "paddingHorizontal": 8,
            "paddingVertical": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "right",
            "transform": [],
            "writingDirection": "ltr",
          }
        }
      />
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`CustomTextInput should render correctly based on props renders correctly for case 4 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      {
        "flex": 1,
      }
    }
  >
    <View>
      <View
        style={
          [
            {
              "borderRadius": 8,
              "flexDirection": "row",
            },
            {
              "backgroundColor": "#1B1B1B",
            },
            {
              "height": "100%",
            },
            undefined,
          ]
        }
      >
        <TextInput
          editable={true}
          multiline={true}
          numberOfLines={3}
          onChangeText={[Function]}
          placeholderTextColor="#585858"
          style={
            [
              {
                "flexBasis": "0%",
                "flexGrow": 1,
                "flexShrink": 1,
              },
              {
                "paddingLeft": 20,
                "paddingRight": 20,
              },
              {
                "fontFamily": "Pretendard-Medium",
                "fontWeight": "500",
              },
              {
                "fontSize": 16,
              },
              {
                "letterSpacing": -0.32,
              },
              {
                "color": "#FFFFFF",
              },
              {
                "paddingBottom": 16,
                "paddingTop": 16,
              },
            ]
          }
          value="test"
        />
      </View>
      <Text
        collapsable={false}
        maxFontSizeMultiplier={1.5}
        onLayout={[Function]}
        style={
          {
            "bottom": -27,
            "color": "#F2F862",
            "fontFamily": "Pretendard-Regular",
            "fontSize": 12,
            "fontWeight": "400",
            "letterSpacing": -0.02,
            "lineHeight": 14,
            "opacity": 0,
            "paddingHorizontal": 8,
            "paddingVertical": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "right",
            "transform": [],
            "writingDirection": "ltr",
          }
        }
      />
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`CustomTextInput should render correctly based on props renders correctly for case 5 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    [
      {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      {
        "flex": 1,
      }
    }
  >
    <View>
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          [
            {
              "paddingLeft": 8,
            },
            {
              "paddingBottom": 8,
            },
          ]
        }
      >
        <Text
          style={
            [
              {
                "textAlign": "left",
              },
              {
                "color": "#FFFFFF",
                "writingDirection": "ltr",
              },
              [
                {
                  "fontFamily": "Pretendard-Regular",
                  "fontSize": 12,
                  "fontWeight": "400",
                  "letterSpacing": -0.02,
                  "lineHeight": 14,
                },
                [
                  {
                    "color": "#7E7D7D",
                  },
                ],
              ],
            ]
          }
        >
          레이블
        </Text>
      </View>
      <View
        style={
          [
            {
              "borderRadius": 8,
              "flexDirection": "row",
            },
            {
              "backgroundColor": "#1B1B1B",
            },
            {
              "height": 48,
            },
            undefined,
          ]
        }
      >
        <TextInput
          editable={true}
          onChangeText={[Function]}
          placeholderTextColor="#585858"
          style={
            [
              {
                "flexBasis": "0%",
                "flexGrow": 1,
                "flexShrink": 1,
              },
              {
                "paddingLeft": 20,
                "paddingRight": 20,
              },
              {
                "fontFamily": "Pretendard-Medium",
                "fontWeight": "500",
              },
              {
                "fontSize": 16,
              },
              {
                "letterSpacing": -0.32,
              },
              {
                "color": "#FFFFFF",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
            ]
          }
          value="test"
        />
        <View
          style={
            [
              {
                "flexGrow": 0,
              },
              {
                "alignItems": "center",
              },
              {
                "justifyContent": "center",
              },
              {
                "paddingBottom": 8,
                "paddingTop": 8,
              },
              {
                "paddingLeft": 8,
                "paddingRight": 8,
              },
            ]
          }
        />
      </View>
      <Text
        collapsable={false}
        maxFontSizeMultiplier={1.5}
        onLayout={[Function]}
        style={
          {
            "bottom": -27,
            "color": "#F2F862",
            "fontFamily": "Pretendard-Regular",
            "fontSize": 12,
            "fontWeight": "400",
            "letterSpacing": -0.02,
            "lineHeight": 14,
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 0,
            "position": "absolute",
            "right": 0,
            "textAlign": "right",
            "transform": [
              {
                "translateY": -0,
              },
            ],
            "writingDirection": "ltr",
          }
        }
      >
        오류
      </Text>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
